{"version":3,"sources":["assets/images/logo.png","components/Loading/index.js","components/MapContainer/index.js","shared/Structure.js","containers/Home/HomeStyle.js","containers/Home/Home.js","containers/SplashScreen/SplashStyle.js","containers/SplashScreen/Splash.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","mapStyles","width","height","MapContainer","google","this","props","zoom","style","initialCenter","lat","lng","position","title","icon","url","anchor","window","maps","Point","scaledSize","Size","Component","GoogleApiWrapper","apiKey","LoadingContainer","FlexContainer","styled","div","justifyContent","alignItems","flexDirection","HomeContainer","Home","SplashContainer","darken","SplashScreen","src","logo","Routers","path","exact","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,4PCI5B,SAASC,IACtB,OACE,oCACE,yBAAKC,UAAU,eAAc,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,gCCJ5J,IAAMC,EAAY,CACdC,MAAO,OACPC,OAAQ,QAGCC,EAAb,iLAEQ,OACI,kBAAC,MAAD,CACEC,OAAQC,KAAKC,MAAMF,OACnBG,KAAM,EACNC,MAAOR,EACPS,cAAe,CAAEC,KAAM,WAAYC,KAAM,aAEvC,kBAAC,SAAD,CAAQC,SAAU,CAAEF,KAAM,WAAYC,KAAM,YAC5CE,MAAO,kBACPC,KAAM,CACFC,IAAK,kDACLC,OAAQ,IAAIC,OAAOb,OAAOc,KAAKC,MAAM,GAAI,IACzCC,WAAY,IAAIH,OAAOb,OAAOc,KAAKG,KAAK,GAAG,YAd/D,GAAkCC,aA0BnBC,6BAAiB,CAC5BC,OAAQ,0CACRC,iBANqB,SAACnB,GAAD,OACvB,kBAACR,EAAD,QAGayB,CAGZpB,G,wLCnCI,IAAMuB,EAAgBC,IAAOC,IAAV,KAEH,SAAAtB,GAAK,OAAGA,EAAMuB,kBAClB,SAAAvB,GAAK,OAAGA,EAAMwB,cACX,SAAAxB,GAAK,OAAGA,EAAMyB,iB,gHCH7B,IAAMC,EAAgBL,YAAOD,EAAPC,CAAH,KCALM,E,iLAEjB,OACE,kBAACD,EAAD,CAAeD,cAAe,UAC5B,kBAAC,EAAD,W,GAJ0BT,a,uSCE3B,IAAMY,EAAkBP,YAAOD,EAAPC,CAAH,IAOXQ,YAAO,GAAM,Y,iBCFfC,EALM,kBACnB,kBAACF,EAAD,CAAiBL,eAAgB,SAAUC,WAAY,UACrD,yBAAKO,IAAKC,MACV,iDCCW,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,KAAK,OAAOE,UAAWN,MCXtC,IAEeO,EAFH,kBAAK,kBAACJ,EAAD,OCSGK,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9882f2f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d1e24f32.png\";","import React from 'react';\n\nimport './loading.scss';\n\nexport default function Loading() {\n  return (\n    <>\n      <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    </>\n  );\n}","import React,{Component} from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport Loading from '../Loading'\nconst mapStyles = {\n    width: '100%',\n    height: '100%',\n  }; \n\nexport class MapContainer extends Component{\n    render() {\n        return (\n            <Map\n              google={this.props.google}\n              zoom={8}\n              style={mapStyles}\n              initialCenter={{ lat: -22.9068467, lng: -43.1728965}}\n            >\n                <Marker position={{ lat: -23.0018679, lng: -43.6359817}} \n                title={'conforto animal'}\n                icon={{\n                    url: \"https://img.icons8.com/wired/64/000000/jake.png\",\n                    anchor: new window.google.maps.Point(32, 32),\n                    scaledSize: new window.google.maps.Size(64,64)\n                  }}\n                />\n            </Map>\n        );\n      }\n}\n\nconst LoadingContainer = (props) => (\n  <Loading></Loading>\n)\n\nexport default GoogleApiWrapper({\n    apiKey: \"AIzaSyDWBfhtb9khVbng8lfRBWqvLANrxq1YvSs\",\n    LoadingContainer: LoadingContainer\n})(MapContainer)","import styled from 'styled-components'\n\nexport const FlexContainer = styled.div`    \n    display: flex;\n    justify-content: ${props=> props.justifyContent};\n    align-items: ${props=> props.alignItems};\n    flex-direction: ${props=> props.flexDirection}\n`\n","import styled from 'styled-components'\nimport { FlexContainer } from '../../shared/Structure'\n\nexport const HomeContainer = styled(FlexContainer)`\n    width: 100vw;\n    height: 100vh;\n\n`","import React, { Component } from 'react'\nimport MapContainer from '../../components/MapContainer';\nimport {HomeContainer} from './HomeStyle'\nexport default class Home extends Component {\n  render() {\n    return(\n      <HomeContainer flexDirection={'column'}>\n        <MapContainer/>\n      </HomeContainer>\n    )\n  }\n}","import styled from 'styled-components'\nimport{ FlexContainer } from '../../shared/Structure'\nimport{ darken } from 'polished'\nimport '../../assets/fonts/fonts.css'\n\nexport const SplashContainer = styled(FlexContainer)`\n    width: 100vw;\n    height: 100vh;\n    background-color: #01A58D;\n    flex-direction:column;\n    h1{\n        font-family: 'Waiting for the Sunrise';\n        color: ${darken(0.50, \"#d5d5d5\")};\n        font-size: 30px\n    }\n`","import React from 'react';\nimport { SplashContainer } from './SplashStyle.js';\nimport { Lang } from '../../shared/pt'\nimport logo from '../../assets/images/logo.png'\n\nconst SplashScreen = () =>\n  <SplashContainer justifyContent={'center'} alignItems={'center'}>\n    <img src={logo}/>\n    <h1>Conforto Animal</h1>\n  </SplashContainer>\nexport default SplashScreen\n","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n  } from \"react-router-dom\";\nimport Home from './containers/Home/Home.js';\nimport SplashScreen  from './containers/SplashScreen/Splash.js';\n\nexport default function Routers() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/spl\" component={SplashScreen}/>\n      </Switch>\n    </BrowserRouter>\n  )\n}","import React from 'react';\nimport Routers from './Router.js';\n\nconst App = ()=> <Routers/>\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}